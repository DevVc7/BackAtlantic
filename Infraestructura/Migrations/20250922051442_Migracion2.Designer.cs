// <auto-generated />
using System;
using Estacionamiento.Infraestructura.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteca.Infraestructura.Migrations
{
    [DbContext(typeof(BibliotecaDbContext))]
    [Migration("20250922051442_Migracion2")]
    partial class Migracion2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.AgenciaDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<decimal?>("CostoBase")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("costo_base");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefono");

                    b.Property<int?>("TiempoEntregaHoras")
                        .HasColumnType("int")
                        .HasColumnName("tiempo_entrega_horas");

                    b.HasKey("Id");

                    b.ToTable("agencias_delivery");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaOperacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_operacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Operacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("operacion");

                    b.Property<int>("RegistroId")
                        .HasColumnType("int")
                        .HasColumnName("registro_id");

                    b.Property<string>("TablaAfectada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tabla_afectada");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<string>("ValoresAnteriores")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("valores_anteriores");

                    b.Property<string>("ValoresNuevos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("valores_nuevos");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("auditoria");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("apellidos");

                    b.Property<string>("CodigoOtp")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("codigo_otp");

                    b.Property<string>("Departamento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("departamento");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("Distrito")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("distrito");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EnListaNegra")
                        .HasColumnType("bit")
                        .HasColumnName("en_lista_negra");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaListaNegra")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_lista_negra");

                    b.Property<DateTime?>("FechaVerificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_verificacion");

                    b.Property<string>("MotivoListaNegra")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("motivo_lista_negra");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombres");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("numero_documento");

                    b.Property<DateTime?>("OtpExpiracion")
                        .HasColumnType("datetime2")
                        .HasColumnName("otp_expiracion");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Provincia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("provincia");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefono");

                    b.Property<bool>("TelefonoVerificado")
                        .HasColumnType("bit")
                        .HasColumnName("telefono_verificado");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_documento");

                    b.Property<string>("Ubigeo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ubigeo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NumeroDocumento")
                        .IsUnique();

                    b.ToTable("clientes");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Configuracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("clave");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaModificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_modificacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_dato");

                    b.Property<int?>("UsuarioModificacionId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_modificacion_id");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("Clave")
                        .IsUnique();

                    b.HasIndex("UsuarioModificacionId");

                    b.ToTable("configuracion");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.CopiaLibro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codigo_barras");

                    b.Property<string>("CodigoQr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("codigo_qr");

                    b.Property<string>("Condicion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("condicion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<int?>("EstanteId")
                        .HasColumnType("int")
                        .HasColumnName("estante_id");

                    b.Property<DateTime>("FechaAdquisicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_adquisicion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_baja");

                    b.Property<int>("LibroId")
                        .HasColumnType("int")
                        .HasColumnName("libro_id");

                    b.Property<string>("MotivoBaja")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("motivo_baja");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<decimal?>("PrecioAdquisicion")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_adquisicion");

                    b.HasKey("Id");

                    b.HasIndex("CodigoBarras")
                        .IsUnique()
                        .HasFilter("[codigo_barras] IS NOT NULL");

                    b.HasIndex("CodigoQr")
                        .IsUnique()
                        .HasFilter("[codigo_qr] IS NOT NULL");

                    b.HasIndex("EstanteId");

                    b.HasIndex("LibroId");

                    b.ToTable("copias_libros");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Estante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<int>("CapacidadMaxima")
                        .HasColumnType("int")
                        .HasColumnName("capacidad_maxima");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ubicacion");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("estantes");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("DisponibleAlquiler")
                        .HasColumnType("bit")
                        .HasColumnName("disponible_alquiler");

                    b.Property<bool>("DisponibleVenta")
                        .HasColumnType("bit")
                        .HasColumnName("disponible_venta");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaPublicacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_publicacion");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("idioma");

                    b.Property<string>("ImagenPortada")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("imagen_portada");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("isbn");

                    b.Property<int?>("NumeroPaginas")
                        .HasColumnType("int")
                        .HasColumnName("numero_paginas");

                    b.Property<decimal>("PrecioAlquilerDia")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_alquiler_dia");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_venta");

                    b.Property<string>("Subtitulo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subtitulo");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Isbn")
                        .IsUnique()
                        .HasFilter("[isbn] IS NOT NULL");

                    b.ToTable("libros");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<bool>("RequiereValidacion")
                        .HasColumnType("bit")
                        .HasColumnName("requiere_validacion");

                    b.HasKey("Id");

                    b.ToTable("metodos_pago");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_expiracion");

                    b.Property<DateTime?>("FechaLectura")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_lectura");

                    b.Property<bool>("Leida")
                        .HasColumnType("bit")
                        .HasColumnName("leida");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mensaje");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tipo");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("notificaciones");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Prestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaDevolucionProgramada")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_devolucion_programada");

                    b.Property<DateTime?>("FechaDevolucionReal")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_devolucion_real");

                    b.Property<DateTime>("FechaPrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_prestamo")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("int")
                        .HasColumnName("metodo_pago_id");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<decimal>("PenalidadAplicada")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("penalidad_aplicada");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int")
                        .HasColumnName("solicitud_id");

                    b.Property<decimal>("TotalPagado")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_pagado");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("prestamos");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.PrestamoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CopiaLibroId")
                        .HasColumnType("int")
                        .HasColumnName("copia_libro_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaDevolucionReal")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_devolucion_real");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<decimal>("Penalidad")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("penalidad");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("int")
                        .HasColumnName("prestamo_id");

                    b.HasKey("Id");

                    b.HasIndex("CopiaLibroId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("prestamo_detalles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("categoria");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_venta");

                    b.Property<int>("StockActual")
                        .HasColumnType("int")
                        .HasColumnName("stock_actual");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int")
                        .HasColumnName("stock_minimo");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("productos");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Solicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgenciaDeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("agencia_delivery_id");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("DireccionEntrega")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direccion_entrega");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaRespuesta")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_respuesta");

                    b.Property<DateTime>("FechaSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_solicitud")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("MotivoRechazo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("motivo_rechazo");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<bool>("RequiereDelivery")
                        .HasColumnType("bit")
                        .HasColumnName("requiere_delivery");

                    b.Property<string>("TipoSolicitud")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_solicitud");

                    b.Property<decimal?>("TotalEstimado")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_estimado");

                    b.Property<int?>("UsuarioRespuestaId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_respuesta_id");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaDeliveryId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioRespuestaId");

                    b.ToTable("solicitudes");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.SolicitudDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int?>("CopiaLibroId")
                        .HasColumnType("int")
                        .HasColumnName("copia_libro_id");

                    b.Property<int?>("DiasAlquiler")
                        .HasColumnType("int")
                        .HasColumnName("dias_alquiler");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int")
                        .HasColumnName("solicitud_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("subtotal");

                    b.Property<string>("TipoItem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_item");

                    b.Property<string>("TipoOperacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_operacion");

                    b.HasKey("Id");

                    b.HasIndex("CopiaLibroId");

                    b.HasIndex("SolicitudId");

                    b.ToTable("solicitud_detalles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("apellidos");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombres");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefono");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2")
                        .HasColumnName("ultimo_acceso");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_venta")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("impuestos");

                    b.Property<int>("MetodoPagoId")
                        .HasColumnType("int")
                        .HasColumnName("metodo_pago_id");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("observaciones");

                    b.Property<int?>("SolicitudId")
                        .HasColumnType("int")
                        .HasColumnName("solicitud_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ventas");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.VentaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int?>("CopiaLibroId")
                        .HasColumnType("int")
                        .HasColumnName("copia_libro_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_unitario");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("subtotal");

                    b.Property<string>("TipoItem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tipo_item");

                    b.Property<int>("VentaId")
                        .HasColumnType("int")
                        .HasColumnName("venta_id");

                    b.HasKey("Id");

                    b.HasIndex("CopiaLibroId");

                    b.HasIndex("VentaId");

                    b.ToTable("venta_detalles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Auditoria", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Auditorias")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Configuracion", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Usuario", "UsuarioModificacion")
                        .WithMany()
                        .HasForeignKey("UsuarioModificacionId");

                    b.Navigation("UsuarioModificacion");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.CopiaLibro", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Estante", "Estante")
                        .WithMany("CopiasLibros")
                        .HasForeignKey("EstanteId");

                    b.HasOne("Biblioteca.Dominio.Entidades.Libro", "Libro")
                        .WithMany("CopiasLibros")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estante");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Libro", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Categoria", "Categoria")
                        .WithMany("Libros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Notificacion", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Notificaciones")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Prestamo", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Prestamos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.MetodoPago", "MetodoPago")
                        .WithMany("Prestamos")
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.Solicitud", "Solicitud")
                        .WithMany("Prestamos")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Prestamos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("MetodoPago");

                    b.Navigation("Solicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.PrestamoDetalle", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.CopiaLibro", "CopiaLibro")
                        .WithMany("PrestamoDetalles")
                        .HasForeignKey("CopiaLibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.Prestamo", "Prestamo")
                        .WithMany("PrestamoDetalles")
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CopiaLibro");

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Solicitud", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.AgenciaDelivery", "AgenciaDelivery")
                        .WithMany("Solicitudes")
                        .HasForeignKey("AgenciaDeliveryId");

                    b.HasOne("Biblioteca.Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Solicitudes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.Usuario", "UsuarioRespuesta")
                        .WithMany("SolicitudesAprobadas")
                        .HasForeignKey("UsuarioRespuestaId");

                    b.Navigation("AgenciaDelivery");

                    b.Navigation("Cliente");

                    b.Navigation("UsuarioRespuesta");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.SolicitudDetalle", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.CopiaLibro", "CopiaLibro")
                        .WithMany("SolicitudDetalles")
                        .HasForeignKey("CopiaLibroId");

                    b.HasOne("Biblioteca.Dominio.Entidades.Solicitud", "Solicitud")
                        .WithMany("SolicitudDetalles")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CopiaLibro");

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Venta", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.MetodoPago", "MetodoPago")
                        .WithMany("Ventas")
                        .HasForeignKey("MetodoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Dominio.Entidades.Solicitud", "Solicitud")
                        .WithMany("Ventas")
                        .HasForeignKey("SolicitudId");

                    b.HasOne("Biblioteca.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Ventas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("MetodoPago");

                    b.Navigation("Solicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.VentaDetalle", b =>
                {
                    b.HasOne("Biblioteca.Dominio.Entidades.CopiaLibro", "CopiaLibro")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("CopiaLibroId");

                    b.HasOne("Biblioteca.Dominio.Entidades.Venta", "Venta")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CopiaLibro");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.AgenciaDelivery", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Categoria", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Cliente", b =>
                {
                    b.Navigation("Notificaciones");

                    b.Navigation("Prestamos");

                    b.Navigation("Solicitudes");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.CopiaLibro", b =>
                {
                    b.Navigation("PrestamoDetalles");

                    b.Navigation("SolicitudDetalles");

                    b.Navigation("VentaDetalles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Estante", b =>
                {
                    b.Navigation("CopiasLibros");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Libro", b =>
                {
                    b.Navigation("CopiasLibros");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.MetodoPago", b =>
                {
                    b.Navigation("Prestamos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Prestamo", b =>
                {
                    b.Navigation("PrestamoDetalles");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Solicitud", b =>
                {
                    b.Navigation("Prestamos");

                    b.Navigation("SolicitudDetalles");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Auditorias");

                    b.Navigation("Prestamos");

                    b.Navigation("SolicitudesAprobadas");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Biblioteca.Dominio.Entidades.Venta", b =>
                {
                    b.Navigation("VentaDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
